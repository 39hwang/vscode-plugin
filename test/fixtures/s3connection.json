{"language":"python","symbol":{"id":"python;boto.s3.connection.S3Connection","name":"S3Connection","namespace":{"id":"python;boto.s3.connection","kind":"module","repr":"boto.s3.connection","type":"module","type_id":""},"value":[{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type","synopsis":"\n DefaultCallingFormat  = 'boto.s3.connection.SubdomainCallingFormat' \n DefaultHost  = 's3.amazonaws.com' \n QueryString  = 'Signature=%s\u0026Expires=%d\u0026AWSAccessKeyId=%s' \n build_post_form_args ( bucket_name ,  key ,  expires_in=6000 ,  acl=None ,  success_action_redirect=None ,  max_content_length=None ,  http_method='http' ,  fields=None ,  conditions=None ,  storage_class='STANDARD' ,  server_side_encryption=None ) Taken from the AWS book Python examples and modified for use with boto\nThis only returns","details":{"function":null,"type":{"components":null,"members":[{"id":"python;boto.s3.connection.S3Connection.get_bucket","name":"get_bucket","namespace":{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type"},"value":[{"id":"python;boto.s3.connection.S3Connection.get_bucket","kind":"function","repr":"boto.s3.connection.S3Connection.get_bucket","type":"instancemethod","type_id":""}]},{"id":"python;boto.s3.connection.S3Connection.mro","name":"mro","namespace":{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type"},"value":[{"id":"python;__builtin__.type.mro","kind":"function","repr":"type.mro","type":"","type_id":""}]},{"id":"python;boto.s3.connection.S3Connection.create_bucket","name":"create_bucket","namespace":{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type"},"value":[{"id":"python;boto.s3.connection.S3Connection.create_bucket","kind":"function","repr":"boto.s3.connection.S3Connection.create_bucket","type":"instancemethod","type_id":""}]},{"id":"python;boto.s3.connection.S3Connection.get_all_buckets","name":"get_all_buckets","namespace":{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type"},"value":[{"id":"python;boto.s3.connection.S3Connection.get_all_buckets","kind":"function","repr":"boto.s3.connection.S3Connection.get_all_buckets","type":"instancemethod","type_id":""}]},{"id":"python;boto.s3.connection.S3Connection.lookup","name":"lookup","namespace":{"id":"python;boto.s3.connection.S3Connection","kind":"type","repr":"boto.s3.connection.S3Connection","type":"type","type_id":"python;__builtin__.type"},"value":[{"id":"python;boto.s3.connection.S3Connection.lookup","kind":"function","repr":"boto.s3.connection.S3Connection.lookup","type":"instancemethod","type_id":""}]}],"total_members":48,"language_details":{"python":{"bases":null,"constructor":{"parameters":[{"name":"aws_access_key_id","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"aws_secret_access_key","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"is_secure","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false}}},{"name":"port","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"proxy","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"proxy_port","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"proxy_user","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"proxy_pass","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"host","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"__builtin__","type":"__builtin__","type_id":"python;__builtin__"}],"annotation":null,"keyword_only":false}}},{"name":"debug","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"int","type":"int","type_id":"python;__builtin__.int"}],"annotation":null,"keyword_only":false}}},{"name":"https_connection_factory","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"calling_format","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"str","type":"str","type_id":"python;__builtin__.str"}],"annotation":null,"keyword_only":false}}},{"name":"path","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"str","type":"str","type_id":"python;__builtin__.str"}],"annotation":null,"keyword_only":false}}},{"name":"provider","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"str","type":"str","type_id":"python;__builtin__.str"}],"annotation":null,"keyword_only":false}}},{"name":"bucket_class","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"__builtin__","type":"__builtin__","type_id":"python;__builtin__"}],"annotation":null,"keyword_only":false}}},{"name":"security_token","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"suppress_consec_slashes","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false}}},{"name":"anon","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"bool","type":"bool","type_id":"python;__builtin__.bool"}],"annotation":null,"keyword_only":false}}},{"name":"validate_certs","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}},{"name":"profile_name","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;__builtin__.None","kind":"instance","repr":"None","type":"NoneType","type_id":"python;types.NoneType"}],"annotation":null,"keyword_only":false}}}],"return_value":null,"signatures":[{"args":[{"name":"access_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"'AKIAIHELJGCR4FDM5KKA'\"","\"'iNsxWj-TBZqwkWbydXTN'\""]},{"id":"python;Tix.NoneType","name":"NoneType","examples":null}]},{"name":"secret_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"'w6Vs+iZ4iaparJvPQFXyrAB27ACAqOI2ddJdw3mO'\"","\"'ZHKL_srw304yh_yKX979O-cnzJ3DWF9vmNM_07vU'\""]},{"id":"python;Tix.NoneType","name":"NoneType","examples":null}]}],"language_details":{"python":{"kwargs":null}}},{"args":null,"language_details":{"python":{"kwargs":null}}},{"args":null,"language_details":{"python":{"kwargs":[{"name":"host","types":[{"id":"python;__builtin__.type","name":"type","examples":null}]},{"name":"is_secure","types":[{"id":"python;__builtin__.bool","name":"bool","examples":null}]},{"name":"calling_format","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'boto.s3.connection.ProtocolIndependentOrdinaryCallingFormat'\"","\"'boto.s3.connection.OrdinaryCallingFormat'\""]}]},{"name":"aws_access_key_id","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'less'\"","\"'fake'\"","\"'admin'\""]}]},{"name":"aws_secret_access_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'more'\"","\"'fake'\"","\"'admin'\""]}]},{"name":"port","types":[{"id":"python;__builtin__.int","name":"int","examples":["8888","8080","8000"]},{"id":"python;__builtin__.property","name":"property","examples":null}]}]}}},{"args":[{"name":"access_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"'AKIAIHELJGCR4FDM5KKA'\"","\"'iNsxWj-TBZqwkWbydXTN'\""]},{"id":"python;Tix.NoneType","name":"NoneType","examples":null}]},{"name":"secret_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"'w6Vs+iZ4iaparJvPQFXyrAB27ACAqOI2ddJdw3mO'\"","\"'ZHKL_srw304yh_yKX979O-cnzJ3DWF9vmNM_07vU'\""]},{"id":"python;Tix.NoneType","name":"NoneType","examples":null}]}],"language_details":{"python":{"kwargs":[{"name":"host","types":[{"id":"python;__builtin__.type","name":"type","examples":null}]},{"name":"is_secure","types":[{"id":"python;__builtin__.bool","name":"bool","examples":null}]},{"name":"calling_format","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'boto.s3.connection.ProtocolIndependentOrdinaryCallingFormat'\"","\"'boto.s3.connection.OrdinaryCallingFormat'\""]}]}]}}},{"args":null,"language_details":{"python":{"kwargs":[{"name":"aws_access_key_id","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'less'\"","\"'fake'\"","\"'admin'\""]}]},{"name":"aws_secret_access_key","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"'more'\"","\"'fake'\"","\"'admin'\""]}]}]}}}],"language_details":{"python":{"receiver":{"name":"self","inferred_value":null,"synopsis":"","language_details":{"python":null}},"return_annotation":null}}}}}},"instance":null,"module":null},"ancestors":[{"id":"python;boto","name":"boto"},{"id":"python;boto.s3","name":"s3"},{"id":"python;boto.s3.connection","name":"connection"}]}],"synopsis":""},"report":{"definition":null,"description_text":"\n DefaultCallingFormat  = 'boto.s3.connection.SubdomainCallingFormat' \n DefaultHost  = 's3.amazonaws.com' \n QueryString  = 'Signature=%s\u0026Expires=%d\u0026AWSAccessKeyId=%s' \n build_post_form_args ( bucket_name ,  key ,  expires_in=6000 ,  acl=None ,  success_action_redirect=None ,  max_content_length=None ,  http_method='http' ,  fields=None ,  conditions=None ,  storage_class='STANDARD' ,  server_side_encryption=None ) Taken from the AWS book Python examples and modified for use with boto\nThis only returns the arguments required for the post form, not the\nactual form.  This does not return the file input field which also\nneeds to be added \n Parameters: bucket_name  ( string ) – Bucket to submit to key  ( string ) – Key name, optionally add ${filename} to the end to\nattach the submitted filename expires_in  ( integer ) – Time (in seconds) before this expires, defaults\nto 6000 acl  ( string ) – A canned ACL.  One of:\n* private\n* public-read\n* public-read-write\n* authenticated-read\n* bucket-owner-read\n* bucket-owner-full-control success_action_redirect  ( string ) – URL to redirect to on success max_content_length  ( integer ) – Maximum size for this file http_method  ( string ) – HTTP Method to use, “http” or “https” storage_class  ( string ) – Storage class to use for storing the object.\nValid values: STANDARD | REDUCED_REDUNDANCY server_side_encryption  ( string ) – Specifies server-side encryption\nalgorithm to use when Amazon S3 creates an object.\nValid values: None | AES256 \n Return type: dict \n Returns: A dictionary containing field names/values as well as\na url to POST to \n \n\n \n \n \n build_post_policy ( expiration_time ,  conditions ) Taken from the AWS book Python examples and modified for use with boto \n \n create_bucket ( bucket_name ,  headers=None ,  location='' ,  policy=None ) Creates a new located bucket. By default it’s in the USA. You can pass\nLocation.EU to create a European bucket (S3) or European Union bucket\n(GCS). \n Parameters: bucket_name  ( string ) – The name of the new bucket headers  ( dict ) – Additional headers to pass along with the request to AWS. location  ( str ) – The location of the new bucket.  You can use one of the\nconstants in  boto.s3.connection.Location  (e.g. Location.EU,\nLocation.USWest, etc.). policy  ( boto.s3.acl.CannedACLStrings ) – A canned ACL policy that will be applied to the\nnew key in S3. \n \n \n delete_bucket ( bucket ,  headers=None ) Removes an S3 bucket. \n In order to remove the bucket, it must first be empty. If the bucket is\nnot empty, an  S3ResponseError  will be raised. \n Parameters: bucket_name  ( string ) – The name of the bucket headers  ( dict ) – Additional headers to pass along with the request to\nAWS. \n \n \n generate_url ( expires_in ,  method ,  bucket='' ,  key='' ,  headers=None ,  query_auth=True ,  force_http=False ,  response_headers=None ,  expires_in_absolute=False ,  version_id=None ) \n generate_url_sigv4 ( expires_in ,  method ,  bucket='' ,  key='' ,  headers=None ,  force_http=False ,  response_headers=None ,  version_id=None ,  iso_date=None ) \n get_all_buckets ( headers=None ) \n get_bucket ( bucket_name ,  validate=True ,  headers=None ) Retrieves a bucket by name. \n If the bucket does not exist, an  S3ResponseError  will be raised. If\nyou are unsure if the bucket exists or not, you can use the\n S3Connection.lookup  method, which will either return a valid bucket\nor  None . \n If  validate=False  is passed, no request is made to the service (no\ncharge/communication delay). This is only safe to do if you are  sure \nthe bucket exists. \n If the default  validate=True  is passed, a request is made to the\nservice to ensure the bucket exists. Prior to Boto v2.25.0, this fetched\na list of keys (but with a max limit set to  0 , always returning an empty\nlist) in the bucket (\u0026 included better error messages), at an\nincreased expense. As of Boto v2.25.0, this now performs a HEAD request\n(less expensive but worse error messages). \n If you were relying on parsing the error message before, you should call\nsomething like: \n bucket = conn.get_bucket('\u003cbucket_name\u003e', validate=False)\nbucket.get_all_keys(maxkeys=0)\n \n\n Parameters: bucket_name  ( string ) – The name of the bucket headers  ( dict ) – Additional headers to pass along with the request to\nAWS. validate  ( boolean ) – If  True , it will try to verify the bucket exists\non the service-side. (Default:  True ) \n \n \n get_canonical_user_id ( headers=None ) Convenience method that returns the “CanonicalUserID” of the\nuser who’s credentials are associated with the connection.\nThe only way to get this value is to do a GET request on the\nservice which returns all buckets associated with the account.\nAs part of that response, the canonical userid is returned.\nThis method simply does all of that and then returns just the\nuser id. \n Return type: string Returns: A string containing the canonical user id. \n \n head_bucket ( bucket_name ,  headers=None ) Determines if a bucket exists by name. \n If the bucket does not exist, an  S3ResponseError  will be raised. \n Parameters: bucket_name  ( string ) – The name of the bucket headers  ( dict ) – Additional headers to pass along with the request to\nAWS. \n Returns: A \u003cBucket\u003e object \n \n \n lookup ( bucket_name ,  validate=True ,  headers=None ) Attempts to get a bucket from S3. \n Works identically to  S3Connection.get_bucket , save for that it\nwill return  None  if the bucket does not exist instead of throwing\nan exception. \n Parameters: bucket_name  ( string ) – The name of the bucket headers  ( dict ) – Additional headers to pass along with the request to\nAWS. validate  ( boolean ) – If  True , it will try to fetch all keys within the\ngiven bucket. (Default:  True ) \n \n \n make_request ( method ,  bucket='' ,  key='' ,  headers=None ,  data='' ,  query_args=None ,  sender=None ,  override_num_retries=None ,  retry_handler=None ) \n set_bucket_class ( bucket_class ) Set the Bucket class associated with this bucket.  By default, this\nwould be the boto.s3.key.Bucket class but if you want to subclass that\nfor some reason this allows you to associate your new class. \n Parameters: bucket_class  ( class ) – A subclass of Bucket that can be more specific \n ","description_html":"\u003cbody\u003e\u003cdl class=\"attribute\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.DefaultCallingFormat\"\u003e\n\u003ccode\u003eDefaultCallingFormat\u003c/code\u003e\u003cem\u003e = \u0026#39;boto.s3.connection.SubdomainCallingFormat\u0026#39;\u003c/em\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"attribute\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.DefaultHost\"\u003e\n\u003ccode\u003eDefaultHost\u003c/code\u003e\u003cem\u003e = \u0026#39;s3.amazonaws.com\u0026#39;\u003c/em\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"attribute\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.QueryString\"\u003e\n\u003ccode\u003eQueryString\u003c/code\u003e\u003cem\u003e = \u0026#39;Signature=%s\u0026amp;Expires=%d\u0026amp;AWSAccessKeyId=%s\u0026#39;\u003c/em\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.build_post_form_args\"\u003e\n\u003ccode\u003ebuild_post_form_args\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_name\u003c/em\u003e, \u003cem\u003ekey\u003c/em\u003e, \u003cem\u003eexpires_in=6000\u003c/em\u003e, \u003cem\u003eacl=None\u003c/em\u003e, \u003cem\u003esuccess_action_redirect=None\u003c/em\u003e, \u003cem\u003emax_content_length=None\u003c/em\u003e, \u003cem\u003ehttp_method=\u0026#39;http\u0026#39;\u003c/em\u003e, \u003cem\u003efields=None\u003c/em\u003e, \u003cem\u003econditions=None\u003c/em\u003e, \u003cem\u003estorage_class=\u0026#39;STANDARD\u0026#39;\u003c/em\u003e, \u003cem\u003eserver_side_encryption=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eTaken from the AWS book Python examples and modified for use with boto\nThis only returns the arguments required for the post form, not the\nactual form.  This does not return the file input field which also\nneeds to be added\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – Bucket to submit to\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ekey\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – Key name, optionally add ${filename} to the end to\nattach the submitted filename\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eexpires_in\u003c/strong\u003e (\u003cem\u003einteger\u003c/em\u003e) – Time (in seconds) before this expires, defaults\nto 6000\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eacl\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – A canned ACL.  One of:\n* private\n* public-read\n* public-read-write\n* authenticated-read\n* bucket-owner-read\n* bucket-owner-full-control\u003c/li\u003e\u003cli\u003e\u003cstrong\u003esuccess_action_redirect\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – URL to redirect to on success\u003c/li\u003e\u003cli\u003e\u003cstrong\u003emax_content_length\u003c/strong\u003e (\u003cem\u003einteger\u003c/em\u003e) – Maximum size for this file\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ehttp_method\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – HTTP Method to use, “http” or “https”\u003c/li\u003e\u003cli\u003e\u003cstrong\u003estorage_class\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – Storage class to use for storing the object.\nValid values: STANDARD | REDUCED_REDUNDANCY\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eserver_side_encryption\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – Specifies server-side encryption\nalgorithm to use when Amazon S3 creates an object.\nValid values: None | AES256\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eReturn type:\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003edict\u003c/a\u003e\u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eReturns:\u003c/td\u003e\u003ctd\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eA dictionary containing field names/values as well as\na url to POST to\u003c/p\u003e\n\u003cpre class=\"lang-python\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.build_post_policy\"\u003e\n\u003ccode\u003ebuild_post_policy\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003eexpiration_time\u003c/em\u003e, \u003cem\u003econditions\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eTaken from the AWS book Python examples and modified for use with boto\u003c/p\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.create_bucket\"\u003e\n\u003ccode\u003ecreate_bucket\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_name\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e, \u003cem\u003elocation=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003epolicy=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eCreates a new located bucket. By default it’s in the USA. You can pass\nLocation.EU to create a European bucket (S3) or European Union bucket\n(GCS).\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – The name of the new bucket\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eheaders\u003c/strong\u003e (\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003e\u003cem\u003edict\u003c/em\u003e\u003c/a\u003e) – Additional headers to pass along with the request to AWS.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003elocation\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/functions.html#str\"\u003e\u003cem\u003estr\u003c/em\u003e\u003c/a\u003e) – The location of the new bucket.  You can use one of the\nconstants in \u003ca class=\"internal_link\" href=\"#boto.s3.connection.Location\"\u003e\u003ccode\u003eboto.s3.connection.Location\u003c/code\u003e\u003c/a\u003e (e.g. Location.EU,\nLocation.USWest, etc.).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003epolicy\u003c/strong\u003e (\u003ccode\u003eboto.s3.acl.CannedACLStrings\u003c/code\u003e) – A canned ACL policy that will be applied to the\nnew key in S3.\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.delete_bucket\"\u003e\n\u003ccode\u003edelete_bucket\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eRemoves an S3 bucket.\u003c/p\u003e\n\u003cp\u003eIn order to remove the bucket, it must first be empty. If the bucket is\nnot empty, an \u003ccode\u003eS3ResponseError\u003c/code\u003e will be raised.\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – The name of the bucket\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eheaders\u003c/strong\u003e (\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003e\u003cem\u003edict\u003c/em\u003e\u003c/a\u003e) – Additional headers to pass along with the request to\nAWS.\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.generate_url\"\u003e\n\u003ccode\u003egenerate_url\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003eexpires_in\u003c/em\u003e, \u003cem\u003emethod\u003c/em\u003e, \u003cem\u003ebucket=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003ekey=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e, \u003cem\u003equery_auth=True\u003c/em\u003e, \u003cem\u003eforce_http=False\u003c/em\u003e, \u003cem\u003eresponse_headers=None\u003c/em\u003e, \u003cem\u003eexpires_in_absolute=False\u003c/em\u003e, \u003cem\u003eversion_id=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.generate_url_sigv4\"\u003e\n\u003ccode\u003egenerate_url_sigv4\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003eexpires_in\u003c/em\u003e, \u003cem\u003emethod\u003c/em\u003e, \u003cem\u003ebucket=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003ekey=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e, \u003cem\u003eforce_http=False\u003c/em\u003e, \u003cem\u003eresponse_headers=None\u003c/em\u003e, \u003cem\u003eversion_id=None\u003c/em\u003e, \u003cem\u003eiso_date=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.get_all_buckets\"\u003e\n\u003ccode\u003eget_all_buckets\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.get_bucket\"\u003e\n\u003ccode\u003eget_bucket\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_name\u003c/em\u003e, \u003cem\u003evalidate=True\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eRetrieves a bucket by name.\u003c/p\u003e\n\u003cp\u003eIf the bucket does not exist, an \u003ccode\u003eS3ResponseError\u003c/code\u003e will be raised. If\nyou are unsure if the bucket exists or not, you can use the\n\u003ccode\u003eS3Connection.lookup\u003c/code\u003e method, which will either return a valid bucket\nor \u003ccode\u003eNone\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003evalidate=False\u003c/code\u003e is passed, no request is made to the service (no\ncharge/communication delay). This is only safe to do if you are \u003cstrong\u003esure\u003c/strong\u003e\nthe bucket exists.\u003c/p\u003e\n\u003cp\u003eIf the default \u003ccode\u003evalidate=True\u003c/code\u003e is passed, a request is made to the\nservice to ensure the bucket exists. Prior to Boto v2.25.0, this fetched\na list of keys (but with a max limit set to \u003ccode\u003e0\u003c/code\u003e, always returning an empty\nlist) in the bucket (\u0026amp; included better error messages), at an\nincreased expense. As of Boto v2.25.0, this now performs a HEAD request\n(less expensive but worse error messages).\u003c/p\u003e\n\u003cp\u003eIf you were relying on parsing the error message before, you should call\nsomething like:\u003c/p\u003e\n\u003cpre class=\"lang-python\"\u003e\u003ccode\u003ebucket = conn.get_bucket(\u0026#39;\u0026lt;bucket_name\u0026gt;\u0026#39;, validate=False)\nbucket.get_all_keys(maxkeys=0)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – The name of the bucket\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eheaders\u003c/strong\u003e (\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003e\u003cem\u003edict\u003c/em\u003e\u003c/a\u003e) – Additional headers to pass along with the request to\nAWS.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003evalidate\u003c/strong\u003e (\u003cem\u003eboolean\u003c/em\u003e) – If \u003ccode\u003eTrue\u003c/code\u003e, it will try to verify the bucket exists\non the service-side. (Default: \u003ccode\u003eTrue\u003c/code\u003e)\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.get_canonical_user_id\"\u003e\n\u003ccode\u003eget_canonical_user_id\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eConvenience method that returns the “CanonicalUserID” of the\nuser who’s credentials are associated with the connection.\nThe only way to get this value is to do a GET request on the\nservice which returns all buckets associated with the account.\nAs part of that response, the canonical userid is returned.\nThis method simply does all of that and then returns just the\nuser id.\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eReturn type:\u003c/td\u003e\u003ctd\u003e\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003estring\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eReturns:\u003c/td\u003e\u003ctd\u003eA string containing the canonical user id.\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.head_bucket\"\u003e\n\u003ccode\u003ehead_bucket\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_name\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eDetermines if a bucket exists by name.\u003c/p\u003e\n\u003cp\u003eIf the bucket does not exist, an \u003ccode\u003eS3ResponseError\u003c/code\u003e will be raised.\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – The name of the bucket\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eheaders\u003c/strong\u003e (\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003e\u003cem\u003edict\u003c/em\u003e\u003c/a\u003e) – Additional headers to pass along with the request to\nAWS.\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eReturns:\u003c/td\u003e\u003ctd\u003e\u003cp\u003eA \u0026lt;Bucket\u0026gt; object\u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.lookup\"\u003e\n\u003ccode\u003elookup\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_name\u003c/em\u003e, \u003cem\u003evalidate=True\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eAttempts to get a bucket from S3.\u003c/p\u003e\n\u003cp\u003eWorks identically to \u003ccode\u003eS3Connection.get_bucket\u003c/code\u003e, save for that it\nwill return \u003ccode\u003eNone\u003c/code\u003e if the bucket does not exist instead of throwing\nan exception.\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ebucket_name\u003c/strong\u003e (\u003ca class=\"external_link\" href=\"#http://docs.python.org/library/string.html#module-string\"\u003e\u003cem\u003estring\u003c/em\u003e\u003c/a\u003e) – The name of the bucket\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eheaders\u003c/strong\u003e (\u003ca class=\"internal_link\" href=\"#boto.dynamodb.schema.Schema.dict\"\u003e\u003cem\u003edict\u003c/em\u003e\u003c/a\u003e) – Additional headers to pass along with the request to\nAWS.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003evalidate\u003c/strong\u003e (\u003cem\u003eboolean\u003c/em\u003e) – If \u003ccode\u003eTrue\u003c/code\u003e, it will try to fetch all keys within the\ngiven bucket. (Default: \u003ccode\u003eTrue\u003c/code\u003e)\u003c/li\u003e\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.make_request\"\u003e\n\u003ccode\u003emake_request\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003emethod\u003c/em\u003e, \u003cem\u003ebucket=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003ekey=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003eheaders=None\u003c/em\u003e, \u003cem\u003edata=\u0026#39;\u0026#39;\u003c/em\u003e, \u003cem\u003equery_args=None\u003c/em\u003e, \u003cem\u003esender=None\u003c/em\u003e, \u003cem\u003eoverride_num_retries=None\u003c/em\u003e, \u003cem\u003eretry_handler=None\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003c/dd\u003e\u003c/dl\u003e\u003cdl class=\"method\"\u003e\u003cdt id=\"boto.s3.connection.S3Connection.set_bucket_class\"\u003e\n\u003ccode\u003eset_bucket_class\u003c/code\u003e\u003cspan\u003e(\u003c/span\u003e\u003cem\u003ebucket_class\u003c/em\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/dt\u003e\u003cdd\u003e\u003cp\u003eSet the Bucket class associated with this bucket.  By default, this\nwould be the boto.s3.key.Bucket class but if you want to subclass that\nfor some reason this allows you to associate your new class.\u003c/p\u003e\n\u003ctable\u003e\u003ctr valign=\"top\"\u003e\u003ctd\u003eParameters:\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003ebucket_class\u003c/strong\u003e (\u003cem\u003eclass\u003c/em\u003e) – A subclass of Bucket that can be more specific\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/dd\u003e\u003c/dl\u003e\u003c/body\u003e","examples":null,"usages":null,"total_usages":0,"links":null,"total_links":0}}